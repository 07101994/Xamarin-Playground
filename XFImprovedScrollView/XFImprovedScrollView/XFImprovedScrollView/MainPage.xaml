<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:local="clr-namespace:XFImprovedScrollView"
             x:Class="XFImprovedScrollView.MainPage"
              Padding="0,20,0,0">

  <StackLayout Padding="10,0,10,0">
  
  <Label Text="Welcome to Xamarin Forms!"
           VerticalOptions="Center"
           HorizontalOptions="Center" />
    
  <local:BloopyScrollView>
    <local:BloopyScrollView.BackgroundImage>
      <FileImageSource File="xamarinBackgroundImage.png"/>
    </local:BloopyScrollView.BackgroundImage>
    <Label
      FontSize="22"
      Text=
      "Xamarin.Forms is a cross-platform natively backed UI toolkit abstraction that allows developers to easily create 
      user interfaces that can be shared across Android, iOS, Windows, and Windows Phone. 
      The user interfaces are rendered using the native controls of the target platform, allowing Xamarin.Forms 
      applications to retain the appropriate look and feel for each platform. 
      This article provides an introduction to Xamarin.Forms and how to get started writing applications with it.
      
      Xamarin.Forms is a framework that allows developers to rapidly create cross platform user interfaces. 
      It provides it's own abstraction for the user interface that will be rendered using native controls 
      on iOS, Android, Windows, or Windows Phone. 
      This means that applications can share a large portion of their user interface code and still retain the 
      native look and feel of the target platform.
      Xamarin.Forms allows for rapid prototyping of applications that can evolve over time to complex applications. 
      Because Xamarin.Forms applications are native applications, 
      they don't have the limitations of other toolkits such as browser sandboxing, limited APIs, or poor performance. 
      Applications written using Xamarin.Forms are able to utilize any of the API’s or features of the 
      underlying platform, such as (but not limited to) CoreMotion, 
      PassKit, and StoreKit on iOS; NFC and Google Play Services on Android; and Tiles on Windows. 
      In addition, it's possible to create applications that will have parts of their user interface created 
      with Xamarin.Forms while other parts are created using the native UI toolkit.">
  </Label>
  </local:BloopyScrollView>
    
  </StackLayout>

</ContentPage>